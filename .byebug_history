c
n
delimiter
numbers
n
c
numbers
delimiter
delimiter, numbers = numbers[2..].split('\n')
numbers[2..].split('\n')
numbers
c
numbers
numbers = "//;\n1;2"
n
numbers = "//;\n1;2"
numbers = "//;\\n1;2"
numbers
numbers = "//;\n1;2'\"
numbers = '//;\n1;2'
numbers
c
numbers
n
numbers
n
numbers
n
numbers
n
numbers.empty?
numbers
c
numbers
c
numbers[2..]
numbers
c
match = numbers.match(%r{//(.+)\n(.*)})
numbers.match(%r{//(.+)\n(.*)})
c
numbers
n
delimiter
n
numbers
numbers.split("\n", 2)
c
numbers
numbers.split("\n", 2)
parts
delimiter = parts[0]
delimiter = parts[0..1]
delimiter = parts[0][1..]
numbers = parts[1]
delimiter = parts[0][2..]
parts = numbers.split("\n", 2)
numbers[2..].split("\n", 2)
c
numbers[2..].split("\n", 2)
c
numbers[2..].split("\n", 2)
c
numbersc
numbers
delimiter
c
numbers
delimiter, numbers = numbers[2..].split("\n")
c
delimiter
n
c
delimiter
numbers
n
numbers.gsub('\n', delimiter).split(delimiter).map(&:to_i).sum
numbers = numbers[4..]
delimiter = numbers[2]
c
numbers
delimiter
numbers
numbes
delimiter, numbers = numbers[2..].split("\n", 2)
numbers
numbers.delete('//[]').split(';')
numbers.delete('//[]').split(',')
numbers.delete('//[]').split('')
numbers.delete('//[]')
numbers.first.delete('//[]')
numbers.split("\n")
numbers.split("\n", 2)
numbers
c
numbers
header
header, numbers = numbers.split("\n", 2)
numbers.start_with?('//')
c
header, numbers = numbers.split("\n", 2)
numbers
delimiter = header[2..]
header, numbers = numbers.split("\n", 2)
numbers
c
numnbers
delimiter, numbers = numbers[2..].split('\n', 2)
numbers
delimiter
delimiter, numbers = numbers[2..].split("\n", 2)
numbers.start_with?('//')
c
d
number
n
numbers.start_with?('//')
